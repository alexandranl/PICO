{"frames":[{"func":"auto.arima(dic_seasadj)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"myarima(x, order = c(results[k, 1], d, results[k, 3]), seasonal = c(results[k, \n    4], D, results[k, 6]), constant = results[k, 7] == 1, ic, \n    trace, approximation = FALSE, method = method, xreg = xreg, \n    ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"suppressWarnings(fit <- try(stats::arima(x = x, order = order, \n    seasonal = list(order = seasonal, period = m), include.mean = constant, \n    method = method, xreg = xreg, ...), silent = TRUE))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withCallingHandlers(expr, warning = function(w) if (inherits(w, \n    classes)) tryInvokeRestart(\"muffleWarning\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"try(stats::arima(x = x, order = order, seasonal = list(order = seasonal, \n    period = m), include.mean = constant, method = method, xreg = xreg, \n    ...), silent = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch)))  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stats::arima(x = x, order = order, seasonal = list(order = seasonal, \n    period = m), include.mean = constant, method = method, xreg = xreg, \n    ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"optim(init[mask], armafn, method = optim.method, hessian = TRUE, \n    control = optim.control, trans = as.logical(transform.pars))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function (par) \nfn(par, ...))(c(-0.174497283734292, 0.767732773022183, -0.436811848315286, \n-0.660132874538403, 0.12491373404902, -0.1434933370891))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"fn(par, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(upARIMA(mod, trarma[[1L]], trarma[[2L]]), error = function(e) NULL)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"no loop for break/next, jumping to top level"}